// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Chystik/gophermart/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// WithdrawalRepository is an autogenerated mock type for the WithdrawalRepository type
type WithdrawalRepository struct {
	mock.Mock
}

type WithdrawalRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WithdrawalRepository) EXPECT() *WithdrawalRepository_Expecter {
	return &WithdrawalRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *WithdrawalRepository) Create(_a0 context.Context, _a1 models.Withdrawal) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Withdrawal) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawalRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type WithdrawalRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.Withdrawal
func (_e *WithdrawalRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *WithdrawalRepository_Create_Call {
	return &WithdrawalRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *WithdrawalRepository_Create_Call) Run(run func(_a0 context.Context, _a1 models.Withdrawal)) *WithdrawalRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Withdrawal))
	})
	return _c
}

func (_c *WithdrawalRepository_Create_Call) Return(_a0 error) *WithdrawalRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WithdrawalRepository_Create_Call) RunAndReturn(run func(context.Context, models.Withdrawal) error) *WithdrawalRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: _a0
func (_m *WithdrawalRepository) GetAll(_a0 context.Context) ([]models.Withdrawal, error) {
	ret := _m.Called(_a0)

	var r0 []models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Withdrawal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Withdrawal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawalRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type WithdrawalRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *WithdrawalRepository_Expecter) GetAll(_a0 interface{}) *WithdrawalRepository_GetAll_Call {
	return &WithdrawalRepository_GetAll_Call{Call: _e.mock.On("GetAll", _a0)}
}

func (_c *WithdrawalRepository_GetAll_Call) Run(run func(_a0 context.Context)) *WithdrawalRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *WithdrawalRepository_GetAll_Call) Return(_a0 []models.Withdrawal, _a1 error) *WithdrawalRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WithdrawalRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]models.Withdrawal, error)) *WithdrawalRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewWithdrawalRepository creates a new instance of WithdrawalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawalRepository {
	mock := &WithdrawalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
