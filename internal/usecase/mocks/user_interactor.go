// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Chystik/gophermart/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserInteractor is an autogenerated mock type for the UserInteractor type
type UserInteractor struct {
	mock.Mock
}

type UserInteractor_Expecter struct {
	mock *mock.Mock
}

func (_m *UserInteractor) EXPECT() *UserInteractor_Expecter {
	return &UserInteractor_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: _a0, _a1
func (_m *UserInteractor) Authenticate(_a0 context.Context, _a1 models.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserInteractor_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type UserInteractor_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserInteractor_Expecter) Authenticate(_a0 interface{}, _a1 interface{}) *UserInteractor_Authenticate_Call {
	return &UserInteractor_Authenticate_Call{Call: _e.mock.On("Authenticate", _a0, _a1)}
}

func (_c *UserInteractor_Authenticate_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserInteractor_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserInteractor_Authenticate_Call) Return(_a0 error) *UserInteractor_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserInteractor_Authenticate_Call) RunAndReturn(run func(context.Context, models.User) error) *UserInteractor_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *UserInteractor) Get(_a0 context.Context, _a1 models.User) (models.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInteractor_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserInteractor_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserInteractor_Expecter) Get(_a0 interface{}, _a1 interface{}) *UserInteractor_Get_Call {
	return &UserInteractor_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *UserInteractor_Get_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserInteractor_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserInteractor_Get_Call) Return(_a0 models.User, _a1 error) *UserInteractor_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserInteractor_Get_Call) RunAndReturn(run func(context.Context, models.User) (models.User, error)) *UserInteractor_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawals provides a mock function with given fields: _a0
func (_m *UserInteractor) GetWithdrawals(_a0 context.Context) ([]models.Withdrawal, error) {
	ret := _m.Called(_a0)

	var r0 []models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Withdrawal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Withdrawal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInteractor_GetWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawals'
type UserInteractor_GetWithdrawals_Call struct {
	*mock.Call
}

// GetWithdrawals is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *UserInteractor_Expecter) GetWithdrawals(_a0 interface{}) *UserInteractor_GetWithdrawals_Call {
	return &UserInteractor_GetWithdrawals_Call{Call: _e.mock.On("GetWithdrawals", _a0)}
}

func (_c *UserInteractor_GetWithdrawals_Call) Run(run func(_a0 context.Context)) *UserInteractor_GetWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserInteractor_GetWithdrawals_Call) Return(_a0 []models.Withdrawal, _a1 error) *UserInteractor_GetWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserInteractor_GetWithdrawals_Call) RunAndReturn(run func(context.Context) ([]models.Withdrawal, error)) *UserInteractor_GetWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *UserInteractor) Register(_a0 context.Context, _a1 models.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserInteractor_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserInteractor_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserInteractor_Expecter) Register(_a0 interface{}, _a1 interface{}) *UserInteractor_Register_Call {
	return &UserInteractor_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *UserInteractor_Register_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserInteractor_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserInteractor_Register_Call) Return(_a0 error) *UserInteractor_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserInteractor_Register_Call) RunAndReturn(run func(context.Context, models.User) error) *UserInteractor_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserInteractor) Withdraw(_a0 context.Context, _a1 models.Withdrawal, _a2 models.User) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Withdrawal, models.User) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserInteractor_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type UserInteractor_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.Withdrawal
//   - _a2 models.User
func (_e *UserInteractor_Expecter) Withdraw(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserInteractor_Withdraw_Call {
	return &UserInteractor_Withdraw_Call{Call: _e.mock.On("Withdraw", _a0, _a1, _a2)}
}

func (_c *UserInteractor_Withdraw_Call) Run(run func(_a0 context.Context, _a1 models.Withdrawal, _a2 models.User)) *UserInteractor_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Withdrawal), args[2].(models.User))
	})
	return _c
}

func (_c *UserInteractor_Withdraw_Call) Return(_a0 error) *UserInteractor_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserInteractor_Withdraw_Call) RunAndReturn(run func(context.Context, models.Withdrawal, models.User) error) *UserInteractor_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserInteractor creates a new instance of UserInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserInteractor {
	mock := &UserInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
