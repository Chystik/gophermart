// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Chystik/gophermart/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *OrderRepository) Create(_a0 context.Context, _a1 models.Order) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.Order
func (_e *OrderRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *OrderRepository_Create_Call {
	return &OrderRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *OrderRepository_Create_Call) Run(run func(_a0 context.Context, _a1 models.Order)) *OrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *OrderRepository_Create_Call) Return(_a0 error) *OrderRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_Create_Call) RunAndReturn(run func(context.Context, models.Order) error) *OrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *OrderRepository) Get(_a0 context.Context, _a1 models.Order) (models.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.Order
func (_e *OrderRepository_Expecter) Get(_a0 interface{}, _a1 interface{}) *OrderRepository_Get_Call {
	return &OrderRepository_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *OrderRepository_Get_Call) Run(run func(_a0 context.Context, _a1 models.Order)) *OrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *OrderRepository_Get_Call) Return(_a0 models.Order, _a1 error) *OrderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Get_Call) RunAndReturn(run func(context.Context, models.Order) (models.Order, error)) *OrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: _a0, _a1
func (_m *OrderRepository) GetList(_a0 context.Context, _a1 models.User) ([]models.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) ([]models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) []models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type OrderRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *OrderRepository_Expecter) GetList(_a0 interface{}, _a1 interface{}) *OrderRepository_GetList_Call {
	return &OrderRepository_GetList_Call{Call: _e.mock.On("GetList", _a0, _a1)}
}

func (_c *OrderRepository_GetList_Call) Run(run func(_a0 context.Context, _a1 models.User)) *OrderRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *OrderRepository_GetList_Call) Return(_a0 []models.Order, _a1 error) *OrderRepository_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetList_Call) RunAndReturn(run func(context.Context, models.User) ([]models.Order, error)) *OrderRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnprocessed provides a mock function with given fields: _a0
func (_m *OrderRepository) GetUnprocessed(_a0 context.Context) ([]models.Order, error) {
	ret := _m.Called(_a0)

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetUnprocessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnprocessed'
type OrderRepository_GetUnprocessed_Call struct {
	*mock.Call
}

// GetUnprocessed is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *OrderRepository_Expecter) GetUnprocessed(_a0 interface{}) *OrderRepository_GetUnprocessed_Call {
	return &OrderRepository_GetUnprocessed_Call{Call: _e.mock.On("GetUnprocessed", _a0)}
}

func (_c *OrderRepository_GetUnprocessed_Call) Run(run func(_a0 context.Context)) *OrderRepository_GetUnprocessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OrderRepository_GetUnprocessed_Call) Return(_a0 []models.Order, _a1 error) *OrderRepository_GetUnprocessed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetUnprocessed_Call) RunAndReturn(run func(context.Context) ([]models.Order, error)) *OrderRepository_GetUnprocessed_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *OrderRepository) Update(_a0 context.Context, _a1 models.Order) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.Order
func (_e *OrderRepository_Expecter) Update(_a0 interface{}, _a1 interface{}) *OrderRepository_Update_Call {
	return &OrderRepository_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *OrderRepository_Update_Call) Run(run func(_a0 context.Context, _a1 models.Order)) *OrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *OrderRepository_Update_Call) Return(_a0 error) *OrderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_Update_Call) RunAndReturn(run func(context.Context, models.Order) error) *OrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
